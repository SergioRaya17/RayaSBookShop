// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bookShopAPI.Context;

#nullable disable

namespace bookShopAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250423071943_fiveCreate")]
    partial class fiveCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("bookShopAPI.Models.Autor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biografia")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("FechaFallecimiento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Autores");
                });

            modelBuilder.Entity("bookShopAPI.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("bookShopAPI.Models.Idioma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Idiomas");
                });

            modelBuilder.Entity("bookShopAPI.Models.Libro", b =>
                {
                    b.Property<string>("ISBN")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumeroPaginas")
                        .HasColumnType("int");

                    b.Property<decimal>("Precio")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ISBN");

                    b.ToTable("Libros");
                });

            modelBuilder.Entity("bookShopAPI.Models.Libro_Autor", b =>
                {
                    b.Property<string>("LibroISBN")
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("AutorId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("LibroISBN", "AutorId");

                    b.HasIndex("AutorId");

                    b.ToTable("Libros_Autores");
                });

            modelBuilder.Entity("bookShopAPI.Models.Libro_Categoria", b =>
                {
                    b.Property<string>("LibroISBN")
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("LibroISBN", "CategoriaId");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Libros_Categorias");
                });

            modelBuilder.Entity("bookShopAPI.Models.Libro_Idioma", b =>
                {
                    b.Property<string>("LibroISBN")
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("IdiomaId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("LibroISBN", "IdiomaId");

                    b.HasIndex("IdiomaId");

                    b.ToTable("Libros_Idiomas");
                });

            modelBuilder.Entity("bookShopAPI.Models.Libro_Pedido", b =>
                {
                    b.Property<string>("LibroISBN")
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("PedidoId")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("LibroISBN", "PedidoId");

                    b.HasIndex("PedidoId");

                    b.ToTable("Libros_Pedidos");
                });

            modelBuilder.Entity("bookShopAPI.Models.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Importe")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("bookShopAPI.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("bookShopAPI.Models.Libro_Autor", b =>
                {
                    b.HasOne("bookShopAPI.Models.Autor", "Autor")
                        .WithMany("LibroAutores")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookShopAPI.Models.Libro", "Libro")
                        .WithMany("LibroAutores")
                        .HasForeignKey("LibroISBN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Libro");
                });

            modelBuilder.Entity("bookShopAPI.Models.Libro_Categoria", b =>
                {
                    b.HasOne("bookShopAPI.Models.Categoria", "Categoria")
                        .WithMany("LibroCategorias")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookShopAPI.Models.Libro", "Libro")
                        .WithMany("LibroCategorias")
                        .HasForeignKey("LibroISBN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Libro");
                });

            modelBuilder.Entity("bookShopAPI.Models.Libro_Idioma", b =>
                {
                    b.HasOne("bookShopAPI.Models.Idioma", "Idioma")
                        .WithMany("LibroIdiomas")
                        .HasForeignKey("IdiomaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookShopAPI.Models.Libro", "Libro")
                        .WithMany("LibroIdiomas")
                        .HasForeignKey("LibroISBN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Idioma");

                    b.Navigation("Libro");
                });

            modelBuilder.Entity("bookShopAPI.Models.Libro_Pedido", b =>
                {
                    b.HasOne("bookShopAPI.Models.Libro", "Libro")
                        .WithMany("LibrosPedidos")
                        .HasForeignKey("LibroISBN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookShopAPI.Models.Pedido", "Pedido")
                        .WithMany("LibrosPedidos")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Libro");

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("bookShopAPI.Models.Pedido", b =>
                {
                    b.HasOne("bookShopAPI.Models.Usuario", "Usuario")
                        .WithMany("Pedidos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("bookShopAPI.Models.Autor", b =>
                {
                    b.Navigation("LibroAutores");
                });

            modelBuilder.Entity("bookShopAPI.Models.Categoria", b =>
                {
                    b.Navigation("LibroCategorias");
                });

            modelBuilder.Entity("bookShopAPI.Models.Idioma", b =>
                {
                    b.Navigation("LibroIdiomas");
                });

            modelBuilder.Entity("bookShopAPI.Models.Libro", b =>
                {
                    b.Navigation("LibroAutores");

                    b.Navigation("LibroCategorias");

                    b.Navigation("LibroIdiomas");

                    b.Navigation("LibrosPedidos");
                });

            modelBuilder.Entity("bookShopAPI.Models.Pedido", b =>
                {
                    b.Navigation("LibrosPedidos");
                });

            modelBuilder.Entity("bookShopAPI.Models.Usuario", b =>
                {
                    b.Navigation("Pedidos");
                });
#pragma warning restore 612, 618
        }
    }
}
